"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GGUF_QUANT_RE_GLOBAL = exports.GGUF_QUANT_RE = exports.GGMLQuantizationType = void 0;
exports.parseGGUFQuantLabel = parseGGUFQuantLabel;
var GGMLQuantizationType;
(function (GGMLQuantizationType) {
    GGMLQuantizationType[GGMLQuantizationType["F32"] = 0] = "F32";
    GGMLQuantizationType[GGMLQuantizationType["F16"] = 1] = "F16";
    GGMLQuantizationType[GGMLQuantizationType["Q4_0"] = 2] = "Q4_0";
    GGMLQuantizationType[GGMLQuantizationType["Q4_1"] = 3] = "Q4_1";
    GGMLQuantizationType[GGMLQuantizationType["Q5_0"] = 6] = "Q5_0";
    GGMLQuantizationType[GGMLQuantizationType["Q5_1"] = 7] = "Q5_1";
    GGMLQuantizationType[GGMLQuantizationType["Q8_0"] = 8] = "Q8_0";
    GGMLQuantizationType[GGMLQuantizationType["Q8_1"] = 9] = "Q8_1";
    GGMLQuantizationType[GGMLQuantizationType["Q2_K"] = 10] = "Q2_K";
    GGMLQuantizationType[GGMLQuantizationType["Q3_K"] = 11] = "Q3_K";
    GGMLQuantizationType[GGMLQuantizationType["Q4_K"] = 12] = "Q4_K";
    GGMLQuantizationType[GGMLQuantizationType["Q5_K"] = 13] = "Q5_K";
    GGMLQuantizationType[GGMLQuantizationType["Q6_K"] = 14] = "Q6_K";
    GGMLQuantizationType[GGMLQuantizationType["Q8_K"] = 15] = "Q8_K";
    GGMLQuantizationType[GGMLQuantizationType["IQ2_XXS"] = 16] = "IQ2_XXS";
    GGMLQuantizationType[GGMLQuantizationType["IQ2_XS"] = 17] = "IQ2_XS";
    GGMLQuantizationType[GGMLQuantizationType["IQ3_XXS"] = 18] = "IQ3_XXS";
    GGMLQuantizationType[GGMLQuantizationType["IQ1_S"] = 19] = "IQ1_S";
    GGMLQuantizationType[GGMLQuantizationType["IQ4_NL"] = 20] = "IQ4_NL";
    GGMLQuantizationType[GGMLQuantizationType["IQ3_S"] = 21] = "IQ3_S";
    GGMLQuantizationType[GGMLQuantizationType["IQ2_S"] = 22] = "IQ2_S";
    GGMLQuantizationType[GGMLQuantizationType["IQ4_XS"] = 23] = "IQ4_XS";
    GGMLQuantizationType[GGMLQuantizationType["I8"] = 24] = "I8";
    GGMLQuantizationType[GGMLQuantizationType["I16"] = 25] = "I16";
    GGMLQuantizationType[GGMLQuantizationType["I32"] = 26] = "I32";
    GGMLQuantizationType[GGMLQuantizationType["I64"] = 27] = "I64";
    GGMLQuantizationType[GGMLQuantizationType["F64"] = 28] = "F64";
    GGMLQuantizationType[GGMLQuantizationType["IQ1_M"] = 29] = "IQ1_M";
    GGMLQuantizationType[GGMLQuantizationType["BF16"] = 30] = "BF16";
})(GGMLQuantizationType || (exports.GGMLQuantizationType = GGMLQuantizationType = {}));
const ggufQuants = Object.values(GGMLQuantizationType).filter((v) => typeof v === "string");
exports.GGUF_QUANT_RE = new RegExp(`(?<quant>${ggufQuants.join("|")})` + "(_(?<sizeVariation>[A-Z]+))?");
exports.GGUF_QUANT_RE_GLOBAL = new RegExp(exports.GGUF_QUANT_RE, "g");
function parseGGUFQuantLabel(fname) {
    const quantLabel = fname.toUpperCase().match(exports.GGUF_QUANT_RE_GLOBAL)?.at(-1); // if there is multiple quant substrings in a name, we prefer the last one
    return quantLabel;
}
